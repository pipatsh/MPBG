//
//  MobileDetailInteractorTests.swift
//  MPBG
//
//  Created by Pipat Shuleepongchad on 6/7/2562 BE.
//  Copyright (c) 2562 Pipat Shuleepongchad. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import MPBG
import XCTest

class MobileDetailInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: MobileDetailInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupMobileDetailInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupMobileDetailInteractor()
  {
    sut = MobileDetailInteractor()
  }
  
  // MARK: Test doubles
  
  class MobileDetailPresentationLogicSpy: MobileDetailPresentationLogic
  {
    
    var presentMobileCalled = false
    
    func presentMobile(response: MobileDetail.GetMobile.Response) {
      presentMobileCalled = true
    }
    
    var presentFetchedMobileImagesCalled = false
    
    func presentFetchedMobileImages(response: MobileDetail.FetchMobileImages.Response) {
      presentFetchedMobileImagesCalled = true
    }

  }
  
  class MobilesWorkerSuccessSpy: MobilesWorker
  {
    
    var fetchMobileImagesCalled = false
    
    override func fetchMobileImages(id: Int, completionHandler: @escaping ([MobileImage]?, DataError?) -> Void) {
      fetchMobileImagesCalled = true
      completionHandler([Seeds.MobileImageModel.motoG5Image1,
                         Seeds.MobileImageModel.motoG5Image2],
                        nil)
    }
  }
  
  class MobilesWorkerFailSpy: MobilesWorker
  {
    
    var fetchMobileImagesCalled = false
    
    override func fetchMobileImages(id: Int, completionHandler: @escaping ([MobileImage]?, DataError?) -> Void) {
      fetchMobileImagesCalled = true
      completionHandler(nil,
                        .cannotFetch("Fetch mobile images failed"))
    }
  }
  
  // MARK: Tests
  
  func testGetMobileShouldAskPresenterToMobile()
  {
    let spy = MobileDetailPresentationLogicSpy()
    sut.presenter = spy
    sut.mobile = Seeds.MobileModel.motoG5
    let request = MobileDetail.GetMobile.Request()
    sut.getMobile(request: request)
    
    XCTAssert(spy.presentMobileCalled, "FetchMobile() should ask presenter to present mobile")
    
  }
  
  func testFetchMobileImagesShouldAskMobilesWorkerToFetchMobileImagesAndPresenterToFetchedMobileImages()
  {
    let spy = MobileDetailPresentationLogicSpy()
    sut.presenter = spy
    let workerSpy = MobilesWorkerSuccessSpy(mobilesStore: MobilesAPI())
    sut.worker = workerSpy
    sut.mobile = Seeds.MobileModel.motoG5
    let request = MobileDetail.FetchMobileImages.Request()
    sut.fetchMobileImages(request: request)
    
    XCTAssert(workerSpy.fetchMobileImagesCalled, "FetchMobiles() should ask MobilesWorker to fetchMobileImages")
    
    XCTAssert(spy.presentFetchedMobileImagesCalled, "FetchMobile() should ask presenter to present fetched mobile images")

  }
}

