//
//  MobileListInteractor.swift
//  MPBG
//
//  Created by Pipat Shuleepongchad on 2/7/2562 BE.
//  Copyright (c) 2562 Pipat Shuleepongchad. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MobileListBusinessLogic
{
  var displayMethods: [DisplayMethod] { get }
  var sortMethods: [SortMethod] { get }
  func fetchMobiles(request: MobileList.FetchMobiles.Request)
  func addFavoriteMobile(request: MobileList.AddFavourite.Request)
  func deleteFavoriteMobile(request: MobileList.DeleteFavourite.Request)

}

protocol MobileListDataStore
{
  var mobiles: [Mobile]? { get }
  var favouriteMobiles: [Mobile]? { get }
  var selectedDisplayMethod: DisplayMethod { get }
  var selectedSortMethod: SortMethod { get }
}

class MobileListInteractor: MobileListBusinessLogic, MobileListDataStore
{
  var presenter: MobileListPresentationLogic?
  var workerAPI = MobilesWorker(mobilesStore: MobilesAPI())
  var workerCoreData = MobilesWorker(mobilesStore: MobilesCoreDataStore())
  var mobiles: [Mobile]?
  var favouriteMobiles: [Mobile]?
  var displayMethods = [
    DisplayMethod(type: .all),
    DisplayMethod(type: .favourite)
  ]
  
  var sortMethods = [
    SortMethod(type: .priceLowToHigh),
    SortMethod(type: .priceHighToLow),
    SortMethod(type: .rating)
  ]
  
  var selectedDisplayMethod: DisplayMethod = DisplayMethod(type: .all)
  var selectedSortMethod: SortMethod  = SortMethod(type: .priceLowToHigh)

  
  // MARK: Fetch Mobiles
  
  func fetchMobiles(request: MobileList.FetchMobiles.Request)
  {
    if let displayMethod = request.displayMethod {
      selectedDisplayMethod = displayMethod
    }
    
    if let sortMethod = request.sortMethod {
      selectedSortMethod = sortMethod
    }
    
    if let favouriteMobiles = self.favouriteMobiles {
      fetchMobilesAPI(request: request, favouriteMobiles: favouriteMobiles)
    } else {
      workerCoreData.fetchFavoriteMobiles { [weak self] (mobiles, error) in
        guard let self = self else { return }
        guard let mobiles = mobiles, error == nil else {
          let response = MobileList.Error.Response(error: error ?? DataError.unknownReason)
          self.presenter?.presentError(response: response)
          return
        }
        self.favouriteMobiles = mobiles
        self.fetchMobilesAPI(request: request, favouriteMobiles: mobiles)
      }
    }
  }
  
  func fetchMobilesAPI(request: MobileList.FetchMobiles.Request, favouriteMobiles: [Mobile])
  {
    if let mobiles = self.mobiles {
      let response = MobileList.FetchMobiles.Response(displayMethod: selectedDisplayMethod, sortMethod: selectedSortMethod, mobiles: mobiles, favouriteMobiles: favouriteMobiles)
      self.presenter?.presentFetchedMobiles(response: response)
    } else {
      presenter?.presentProgress(response: MobileList.Progress.Response(show: true))
      workerAPI.fetchMobiles { [weak self] (mobiles, error) in
        guard let self = self else { return }
        self.presenter?.presentProgress(response: MobileList.Progress.Response(show: false))
        guard let mobiles = mobiles, error == nil else {
          let response = MobileList.Error.Response(error: error ?? DataError.unknownReason)
          self.presenter?.presentFetchedMobilesError(response: response)
          return
        }
        
        self.mobiles = mobiles
        let response = MobileList.FetchMobiles.Response(displayMethod: self.selectedDisplayMethod, sortMethod: self.selectedSortMethod, mobiles: mobiles, favouriteMobiles: favouriteMobiles)
        self.presenter?.presentFetchedMobiles(response: response)
      }
    }
  }
  
  
  func addFavoriteMobile(request: MobileList.AddFavourite.Request)
  {
    guard let mobile = mobiles?.first(where: { $0.id == request.id }) else {
      let response = MobileList.Error.Response(error: DataError.cannotAdd("Mobile id does not exist."))
      self.presenter?.presentError(response: response)
      return
    }
    
    workerCoreData.addFavouriteMobile(mobile: mobile) { [weak self] (mobile, error) in
      guard let self = self else { return }
      guard let mobile = mobile, error == nil else {
        let response = MobileList.Error.Response(error: error ?? DataError.unknownReason)
        self.presenter?.presentError(response: response)
        return
      }
      self.favouriteMobiles?.removeAll{ $0.id == request.id }
      self.favouriteMobiles?.append(mobile)
      let response = MobileList.AddFavourite.Response(mobile: mobile)
      self.presenter?.presentAddFavouriteMobile(response: response)
    }
  }
  
  func deleteFavoriteMobile(request: MobileList.DeleteFavourite.Request)
  {
    workerCoreData.deleteFavouriteMobile(id: request.id) { [weak self] (mobile, error) in
      guard let self = self else { return }
      guard let mobile = mobile, error == nil else {
        let response = MobileList.Error.Response(error: error ?? DataError.unknownReason)
        self.presenter?.presentError(response: response)
        return
      }
      self.favouriteMobiles?.removeAll{ $0.id == request.id }
      let response = MobileList.DeleteFavourite.Response(displayMethod: self.selectedDisplayMethod, mobile: mobile)
      self.presenter?.presentDeleteFavouriteMobile(response: response)
    }
  }
}
