//
//  MobileListViewController.swift
//  MPBG
//
//  Created by Pipat Shuleepongchad on 2/7/2562 BE.
//  Copyright (c) 2562 Pipat Shuleepongchad. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SVProgressHUD

protocol MobileListDisplayLogic: class
{
  func displayFetchedMobiles(viewModel: MobileList.FetchMobiles.ViewModel)
  func displayAddFavouriteMobile(viewModel: MobileList.AddFavourite.ViewModel)
  func displayDeleteFavouriteMobile(viewModel: MobileList.DeleteFavourite.ViewModel)
  func displayMobilesError(viewModel: MobileList.Error.ViewModel)
  func displayError(viewModel: MobileList.Error.ViewModel)
  func displayProgress(viewModel: MobileList.Progress.ViewModel)
}

class MobileListViewController: UIViewController, MobileListDisplayLogic
{
  
  var interactor: MobileListBusinessLogic?
  var router: (NSObjectProtocol & MobileListRoutingLogic & MobileListDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MobileListInteractor()
    let presenter = MobileListPresenter()
    let router = MobileListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    configureSegmentedControls()
    fetchMobiles()
  }
    
  // MARK: Segmented Control
  
  @IBOutlet weak var segmentedControl: UISegmentedControl!
  
  func configureSegmentedControls()
  {
    segmentedControl.backgroundColor = .clear
    segmentedControl.tintColor = .clear
    segmentedControl.setTitleTextAttributes([.font : UIFont.boldSystemFont(ofSize: 17),
                                             .foregroundColor : UIColor.lightGray],
                                            for: .normal)
    segmentedControl.setTitleTextAttributes([.font : UIFont.boldSystemFont(ofSize: 17),
                                             .foregroundColor : UIColor.black],
                                            for: .selected)
    segmentedControl.removeAllSegments()
    guard let displayMethods = interactor?.displayMethods else {
      fatalError("displayMethod should not be nil")
    }
    displayMethods.enumerated().forEach { (index, displayMethod) in
      segmentedControl.insertSegment(withTitle: displayMethod.stringValue, at: index, animated: false)
    }
    segmentedControl.selectedSegmentIndex = 0
  }
  
  // MARK: TableView
  
  @IBOutlet weak var tableView: UITableView!
  
  // MARK: Fetch Mobiles
  
  var fetchMobilesViewModel: MobileList.FetchMobiles.ViewModel?
  
  func fetchMobiles(displayMethod: DisplayMethod? = nil, sortMethod: SortMethod? = nil)
  {
    let request = MobileList.FetchMobiles.Request(displayMethod: displayMethod, sortMethod: sortMethod)
    interactor?.fetchMobiles(request: request)
  }

  func displayFetchedMobiles(viewModel: MobileList.FetchMobiles.ViewModel)
  {
    fetchMobilesViewModel = viewModel
    tableView.reloadData()
  }
  
  // MARK: Add Favourite
  
  func addFavouriteMobile(id: Int) {
    let request = MobileList.AddFavourite.Request(id: id)
    interactor?.addFavoriteMobile(request: request)
  }
  
  func displayAddFavouriteMobile(viewModel: MobileList.AddFavourite.ViewModel)
  {
    if let index = fetchMobilesViewModel?.displayedMobiles.firstIndex(where: { $0.id == viewModel.id}) {
      fetchMobilesViewModel?.displayedMobiles[index].isFavourite = true
      tableView.reloadRows(at: [IndexPath(row: index, section: 0)], with: .none)
    }
  }
  
  // MARK: Delete Favourite
  
  func deleteFavouriteMobile(id: Int)
  {
    let request = MobileList.DeleteFavourite.Request(id: id)
    interactor?.deleteFavoriteMobile(request: request)
  }
  
  func displayDeleteFavouriteMobile(viewModel: MobileList.DeleteFavourite.ViewModel)
  {
    if let index = fetchMobilesViewModel?.displayedMobiles.firstIndex(where: { $0.id == viewModel.id}) {
      switch viewModel.displayMethod.type {
      case .all:
        fetchMobilesViewModel?.displayedMobiles[index].isFavourite = false
        tableView.reloadRows(at: [IndexPath(row: index, section: 0)], with: .none)
      case .favourite:
        fetchMobilesViewModel?.displayedMobiles.remove(at: index)
        tableView.deleteRows(at: [IndexPath(row: index, section: 0)], with: .automatic)
      }
      
    }
  }
  
  // MARK: Error
  weak var alertController: UIAlertController?
  
  func displayMobilesError(viewModel: MobileList.Error.ViewModel)
  {
    let alertController = UIAlertController(
      title: viewModel.title,
      message: viewModel.message,
      preferredStyle: .alert
    )
    
    alertController.addAction(
      UIAlertAction(title: "Reload", style: .default, handler: { [weak self] (action) in
        guard let self = self else { return }
        self.fetchMobiles()
      })
    )
    self.alertController = alertController
    present(alertController, animated: true)
  }
  
  func displayError(viewModel: MobileList.Error.ViewModel)
  {
    let alertController = UIAlertController(
      title: viewModel.title,
      message: viewModel.message,
      preferredStyle: .alert
    )
    
    alertController.addAction(
      UIAlertAction(title: "OK", style: .default, handler: nil)
    )
    self.alertController = alertController
    present(alertController, animated: true)
  }
  
  // MARK: Progress
  var displayProgress = false {
    didSet {
      if displayProgress {
        SVProgressHUD.show()
      } else {
        SVProgressHUD.dismiss()
      }
    }
  }
  
  func displayProgress(viewModel: MobileList.Progress.ViewModel)
  {
    displayProgress = viewModel.show
  }
  
  // MARK: Buttons
  @IBAction func segmentedControlClicked(_ sender: UISegmentedControl)
  {
    guard let displayMethods = interactor?.displayMethods,
    sender.selectedSegmentIndex < displayMethods.count else {
      return
    }
    
    let displayMethod = displayMethods[sender.selectedSegmentIndex]
    fetchMobiles(displayMethod: displayMethod)
  }
  @IBAction func sortButtonClicked(_ sender: Any)
  {
    guard let sortMethods = interactor?.sortMethods else { return }
    let alertController = UIAlertController(title: "Sort", message: nil, preferredStyle: .alert)
    sortMethods.enumerated().forEach { (index, sortMethod) in
      alertController.addAction(
        UIAlertAction(title: sortMethod.stringValue, style: .default, handler: { [weak self] _ in
        guard let self = self else { return }
        let sortMethod = sortMethods[index]
        self.fetchMobiles(sortMethod: sortMethod)
      })
      )
    }
    alertController.addAction(UIAlertAction(title: "Cancel", style: .cancel))
    self.alertController = alertController
    present(alertController, animated: true)
  }
}

extension MobileListViewController: UITableViewDataSource
{
  
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
  {
    guard let displayedMobiles = fetchMobilesViewModel?.displayedMobiles else {
      return 0
    }
    return displayedMobiles.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
  {
    guard let fetchMobileViewModel = fetchMobilesViewModel else {
      fatalError("fetchMobileViewModel is nil")
    }
    
    let cell = tableView.dequeueReusableCell(withIdentifier: "MobileListCell") as! MobileListTableViewCell
    let displayedMobile = fetchMobileViewModel.displayedMobiles[indexPath.row]
    cell.display(displayedMobile, displayMethod: fetchMobileViewModel.displayMethod)
    cell.favouriteDidChange(handler: { [weak self] favourite in
      guard let self = self else { return }
      if favourite {
        self.addFavouriteMobile(id: displayedMobile.id)
      } else {
        self.deleteFavouriteMobile(id: displayedMobile.id)
      }
    })
    return cell
  }

  func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool
  {
    if fetchMobilesViewModel?.displayMethod.type == .favourite {
      return true
    }
    return false
  }
  
  func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath)
  {
    
    guard editingStyle == .delete,
      let fetchMobileViewModel = fetchMobilesViewModel else {
        fatalError("fetchMobileViewModel is nil")
    }
    
    let displayedMobile = fetchMobileViewModel.displayedMobiles[indexPath.row]
    deleteFavouriteMobile(id: displayedMobile.id)
    
  }
}
